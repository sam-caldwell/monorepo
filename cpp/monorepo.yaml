---
#
# cpp/monorepo.yaml
# (c) 2023 Sam Caldwell.  See LICENSE.txt.
#
# This file defines how the monorepo tools will
# work when operating against c++ projects.
#
# Golang Structure:
#
#  type LanguageManifest struct {
#    Language    string   `yaml:"language"`
#    Description string   `yaml:"description"`
#    Platforms   []string `yaml:"platforms"`
#    Tasks       struct {
#      Build   []string `yaml:"build"`
#      Linter  []string `yaml:"linter"`
#      Tester  []string `yaml:"tester"`
#      Signing []string `yaml:"signing"`
#    } `yaml:"tasks"`
#  }
#

language: cpp  # must agree with directory name and root manifest
description: c++ language manifest
platforms:
  - macos
  - linux
tasks:
  # language-specific parameters.
  #   - If any task is null, it is not supported currently.
  #   - This should be the command or array of commands which will
  #     execute for each feature.
  #   - We should implement all steps by executing commands through monorepo exec
  #     (written in golang for cross-platform execution).  This keeps the language
  #     build process abstracted from the platform/CPU.
  #
  build:
    - monorepo exec g++ "-o{TARGET_DIR}/{PROJECT_NAME}/{PROGRAM_NAME}{EXTENSION} cpp/{PROJECT_NAME}/main.cpp"
  linter: # feature is empty and not currently supported
  tester:
    - monorepo exec g++ "-o{TARGET_DIR}/{PROJECT_NAME}/{PROGRAM_NAME}{EXTENSION} cpp/{PROJECT_NAME}/main_test.cpp"
    - monorepo exec {TARGET_DIR}/{PROJECT_NAME}/{PROGRAM_NAME}_test
  signing: # feature is empty and not currently supported
